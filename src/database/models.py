"""
Database schema for the Meme Coin Signal Bot.

This module defines the SQLAlchemy ORM models for the database.
"""
from datetime import datetime
from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, ForeignKey, Text, Enum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
import enum

Base = declarative_base()

class BlockchainType(enum.Enum):
    ETHEREUM = "ethereum"
    SOLANA = "solana"

class Token(Base):
    """Token model representing a meme coin token."""
    __tablename__ = "tokens"
    
    id = Column(Integer, primary_key=True)
    address = Column(String(255), unique=True, nullable=False)
    name = Column(String(255), nullable=True)
    symbol = Column(String(50), nullable=True)
    blockchain = Column(Enum(BlockchainType), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Contract details
    contract_verified = Column(Boolean, default=False)
    is_honeypot = Column(Boolean, default=False)
    contract_audit_score = Column(Float, default=0.0)
    
    # Token metrics
    current_price_usd = Column(Float, default=0.0)
    market_cap_usd = Column(Float, default=0.0)
    liquidity_usd = Column(Float, default=0.0)
    volume_24h_usd = Column(Float, default=0.0)
    holders_count = Column(Integer, default=0)
    buy_sell_ratio = Column(Float, default=1.0)
    
    # Relationships
    price_history = relationship("PriceHistory", back_populates="token", cascade="all, delete-orphan")
    social_mentions = relationship("SocialMention", back_populates="token", cascade="all, delete-orphan")
    signals = relationship("Signal", back_populates="token", cascade="all, delete-orphan")
    
    # Scoring
    total_score = Column(Float, default=0.0)
    liquidity_score = Column(Float, default=0.0)
    volume_score = Column(Float, default=0.0)
    social_score = Column(Float, default=0.0)
    safety_score = Column(Float, default=0.0)
    
    def __repr__(self):
        return f"<Token(symbol='{self.symbol}', blockchain='{self.blockchain}')>"


class PriceHistory(Base):
    """Price history for tokens."""
    __tablename__ = "price_history"
    
    id = Column(Integer, primary_key=True)
    token_id = Column(Integer, ForeignKey("tokens.id"), nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    price_usd = Column(Float, nullable=False)
    volume_usd = Column(Float, default=0.0)
    liquidity_usd = Column(Float, default=0.0)
    
    # Relationship
    token = relationship("Token", back_populates="price_history")
    
    def __repr__(self):
        return f"<PriceHistory(token_id={self.token_id}, timestamp='{self.timestamp}')>"


class SocialMentionType(enum.Enum):
    TWITTER = "twitter"
    TELEGRAM = "telegram"
    OTHER = "other"


class SocialMention(Base):
    """Social media mentions of tokens."""
    __tablename__ = "social_mentions"
    
    id = Column(Integer, primary_key=True)
    token_id = Column(Integer, ForeignKey("tokens.id"), nullable=False)
    source = Column(Enum(SocialMentionType), nullable=False)
    author = Column(String(255), nullable=True)
    is_influencer = Column(Boolean, default=False)
    content = Column(Text, nullable=True)
    url = Column(String(512), nullable=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    sentiment_score = Column(Float, default=0.0)
    
    # Relationship
    token = relationship("Token", back_populates="social_mentions")
    
    def __repr__(self):
        return f"<SocialMention(token_id={self.token_id}, source='{self.source}')>"


class SignalType(enum.Enum):
    BUY = "buy"
    STRONG_BUY = "strong_buy"
    NEUTRAL = "neutral"
    SELL = "sell"


class Signal(Base):
    """Buy/sell signals generated by the system."""
    __tablename__ = "signals"
    
    id = Column(Integer, primary_key=True)
    token_id = Column(Integer, ForeignKey("tokens.id"), nullable=False)
    signal_type = Column(Enum(SignalType), nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    score = Column(Float, nullable=False)
    reason = Column(Text, nullable=True)
    sent_to_telegram = Column(Boolean, default=False)
    
    # Snapshot of metrics at signal time
    price_usd = Column(Float, default=0.0)
    liquidity_usd = Column(Float, default=0.0)
    volume_24h_usd = Column(Float, default=0.0)
    holders_count = Column(Integer, default=0)
    buy_sell_ratio = Column(Float, default=1.0)
    social_mentions_count = Column(Integer, default=0)
    
    # Relationship
    token = relationship("Token", back_populates="signals")
    
    def __repr__(self):
        return f"<Signal(token_id={self.token_id}, signal_type='{self.signal_type}')>"
